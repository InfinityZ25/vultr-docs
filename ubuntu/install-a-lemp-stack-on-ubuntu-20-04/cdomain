#!/usr/bin/env bash
config_https(){
	cat > "/etc/nginx/sites-available/${domain}"  <<-EOF
		server {
		    listen 80;
		    listen [::]:80;
		    server_name ${domain};
		    root /var/www/${domain};
		    location / {
		        return 301 https://${domain}\$request_uri;
		    }
		}
		server {
		    listen 80;
		    listen [::]:80;
		    server_name www.${domain};
		    root /var/www/${domain};
		    location / {
		        return 301 https://www.${domain}\$request_uri;
		    }
		}
		server {
		    listen 443 ssl http2;
		    listen [::]:443 ssl http2;
		    ssl_certificate /etc/letsencrypt/live/${domain}/fullchain.pem;
		    ssl_certificate_key /etc/letsencrypt/live/${domain}/privkey.pem;
		    ssl_trusted_certificate /etc/letsencrypt/live/${domain}/fullchain.pem;
		    root /var/www/${domain};
		    index index.php index.html index.htm index.nginx-debian.html;
		    ${pins}
		    add_header X-XSS-Protection "1; mode=block";
		    add_header Content-Security-Policy "default-src 'self'; script-src 'self';";
		    add_header Referrer-Policy "no-referrer";
		    add_header X-Frame-Options "SAMEORIGIN" always;
		    location ~ \.php$ {
		        include snippets/fastcgi-php.conf;
		        fastcgi_pass unix:/run/php/php7.4-fpm.sock;
		    }
		    server_name ${domain};
		    server_name www.${domain};
		    access_log /var/log/${domain}.log;
		    error_log /var/log/${domain}.error.log;
		}
	EOF
}

config_default(){
	cat > "/etc/nginx/sites-available/${domain}" <<-EOF
		server {
		    listen 80;
		    listen [::]:80;
		    server_name ${domain};
		    root /var/www/${domain};
		    location / {
		        index index.html;
		    }
		}
		server {
		    listen 80;
		    listen [::]:80;
		    server_name www.${domain};
		    root /var/www/${domain};
		    location / {
		        index index.html;
		    }
		}
	EOF
}

helpuser(){
	cat <<-EOF
		Usage: ./${0##*/} [options]
	    -d    The domain you want to add/configure (required)
	    -a    Your vultr.com API key (required)
	    -k    The backup location for the public/private keys and pins (optional)
	    -ip   The server's IP address (optional)
	    -s    Skip adding the domain to vultr.com and just obtain certificates (optional)
	EOF
	exit 1
}

declare -ar DEPENDS=(certbot jq curl openssl nginx dig tee)
declare domain
declare apikey
declare skipapi=false
declare -a pinarr
declare pins
declare keyfol="${HOME}/keys"
declare ipaddr

hash -- "${DEPENDS[@]}" || { printf '\nThere are unmet dependencies.\n' >&2; exit 1; }

ipaddr=$(dig @1.1.1.1 whoami.cloudflare TXT CH +short +tries=1 +timeout=3)
ipaddr=${ipaddr//\"/}

while(($# > 0)); do
	case ${1} in
		-d) shift; domain=${1?-d needs a domain} ;;
		-a) shift; apikey=${1?-a needs an API key} ;;
		-k) shift; keyfol=${1?-k needs a keys directory} ;;
		-ip) shift; ipaddr=${1?-ip needs an IP address} ;;
		-s) skipapi=true ;;
		*) helpuser; ;;
	esac
	shift
done

[[ -z ${domain} ]] && { printf 'No domain specified.\n' >&2; exit 1; }
[[ -z ${apikey} ]] && { printf 'No API Key specified.\n' >&2; exit 1; }
[[ -z ${ipaddr} ]] && { printf 'No IP address found.\n' >&2; exit 1; }

${skipapi} || curl -s -L -f -o/dev/null 'https://api.vultr.com/v2/domains' -H "Authorization: Bearer ${apikey}" -H 'Content-Type: application/json' --data-raw "{\"domain\": \"${domain}\", \"ip\": \"${ipaddr}\"}" || { printf 'Could not creat domain %q at vultr. Check the API key is correct and the servers IP is whitelisted before continuing.\n' "${domain}" >&2; exit 1; }
printf '\n%q added successfully.\n' "${domain}"

mkdir -p "/var/www/${domain}"
[[ -d "/var/www/${domain}" && -w "/var/www/${domain}" ]] || { printf 'Cannot write into %q.\n' "${keyfol}" >&2; exit 1; }

config_default || { printf 'There was a problem creating the default nginx config.\n' >&2; exit 1; }
systemctl restart nginx.service || { printf 'Could not restart nginx.\n' >&2; exit 1; }

certbot certonly --dry-run --nginx -d "${domain}" -d "www.${domain}" || {
	printf '\nThe certbot dryrun failed with status %q for %q. Wait a minute and try again while ensuring settings are correct.\n' "$?" "${domain}" >&2
	exit 1
}

sleep 5

certbot certonly --nginx -d "${domain}" -d "www.${domain}" || {
	printf '\nThe certbot dryrun was successful, but failed when attempting to get a certificate. Wait a minute and try again while ensuring settings are correct.\n' >&2
	exit 1
}

mkdir -p "${keyfol}"
[[ -d ${keyfol} && -w ${keyfol} ]] || { printf 'Cannot write into %q.\n' "${keyfol}" >&2; exit 1; }

openssl req -nodes -sha256 -newkey rsa:4096 -keyout "${keyfol}/${domain}.rsa.key" -out "${keyfol}/${domain}.rsa.csr" -subj "/C=GB/ST=London/L=London/O=Global Security/OU=Secret Service/CN=${domain}"
openssl req -nodes -newkey ec:<(openssl ecparam -name prime256v1) -keyout "${keyfol}/${domain}.ec.key" -out "${keyfol}/${domain}.ec.csr" -subj "/C=GB/ST=London/L=London/O=Global Security/OU=Secret Service/CN=${domain}"

pinarr+=("$(openssl req -pubkey < "${keyfol}/${domain}.rsa.csr" | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | base64 | tee "${keyfol}/pins.txt")")
pinarr+=("$(openssl req -pubkey < "${keyfol}/${domain}.ec.csr" | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | base64 | tee "${keyfol}/pins.txt")")
pinarr+=("$(curl -s https://letsencrypt.org/certs/lets-encrypt-x4-cross-signed.pem | openssl x509 -pubkey | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | base64 | tee "${keyfol}/pins.txt")")
pinarr+=("$(curl -s https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem | openssl x509 -pubkey | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | base64 | tee "${keyfol}/pins.txt")")
pinarr+=("$(curl -s https://letsencrypt.org/certs/isrgrootx1.pem | openssl x509 -pubkey | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | base64 | tee "${keyfol}/pins.txt")")

((${#pinarr[@]} == 5)) || { printf 'Could not generate pins successfully.\n' >&2; exit 1; }

pins=$(printf 'pin-sha256="%s"; ' "${pinarr[@]}")
pins="add_header Public-Key-Pins '${pins}max-age=5184000;';"

config_https || { printf 'There was a problem creating the https nginx config.\n' >&2; exit 1; }
ln -s "/etc/nginx/sites-available/${domain}" "/etc/nginx/sites-enabled/" || { printf 'Could not symbolically link %q to sites-enabled.\n' "${domain}" >&2; exit 1; }
systemctl restart nginx.service || { printf 'Could not restart nginx.\n' >&2; exit 1; }

cat <<-EOF
	Everything ran successfully
	Your key pins, public keys and private keys are backed up at ${keyfol}
	Your nginx config file is at /etc/nginx/sites-available/${domain}
	You will need to generate new key pins in approximately 4 months
EOF
exit 0
